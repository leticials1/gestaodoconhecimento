Semana 10 - Trabalho Machine Learning - Modelo de Classificação

Utilizando o banco de dados de Câncer da biblioteca do sklearn,
from sklearn.datasets import load_breast_cancer
cancer = load_breast_cancer()
print("cancer.keys(): \n{}".format(cancer.keys()))
print(cancer.data)

Realize os passos da aula passada e diga:
1-Acurácia Train entire model: KNN(1), KNN(5) e LogReg
2-Acurácia Train/Test Split : KNN(1), KNN(5) e LogReg
3-Gráfico de Tunning KNN(1-25)
4-Qual o melhor modelo com a melhor acurácia?
----------------------------------------------------------------

#Importa base de dados
from sklearn.datasets import load_breast_cancer
cancer = load_breast_cancer()
print("cancer.keys(): \n{}".format(cancer.keys()))
print(cancer.data)


X=cancer.data
y=cancer.target


#1 - Train entire model
from sklearn.neighbors import KNeighborsClassifier
knn = KNeighborsClassifier(n_neighbors=1)
print(knn)
knn.fit(X, y)

knn.predict([[3, 5, 4, 2,3, 5, 4, 2,3, 5, 4, 2,3, 5, 4, 2,3, 5, 4, 2,3, 5, 4, 2,3, 5, 4, 2,3,5]])

X_new = [[3, 5, 4, 2,3, 5, 4, 2,3, 5, 4, 2,3, 5, 4, 2,3, 5, 4, 2,3, 5, 4, 2,3, 5, 4, 2,3,5], [5,1,2,3,6,5,1,2,3,6,5,1,2,3,6,5,1,2,3,6,5,1,2,3,6,5,1,2,3,6]]
knn.predict(X_new)

knn = KNeighborsClassifier(n_neighbors=5)
knn.fit(X, y)
knn.predict(X_new)


from sklearn.linear_model import LogisticRegression
logreg = LogisticRegression()

logreg.fit(X, y)

logreg.predict(X_new)

logreg = LogisticRegression()

logreg.fit(X, y)

logreg.predict(X)

y_pred = logreg.predict(X)

len(y_pred)

from sklearn import metrics

print(metrics.accuracy_score(y, y_pred))

#Calculo da Acurácia

#entire model KNN[5]

from sklearn.neighbors import KNeighborsClassifier
knn = KNeighborsClassifier(n_neighbors=5)
knn.fit(X, y)
y_pred = knn.predict(X)
print(metrics.accuracy_score(y, y_pred))

#entire model KNN[1]

knn = KNeighborsClassifier(n_neighbors=1)
knn.fit(X, y)
y_pred = knn.predict(X)
print(metrics.accuracy_score(y, y_pred))


#2 - Train/Test Split

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.4, random_state=30)

print(X_train.shape)
print(X_test.shape)


print(y_train.shape)
print(y_test.shape)


logreg = LogisticRegression()
logreg.fit(X_train, y_train)


y_pred = logreg.predict(X_test)


print(metrics.accuracy_score(y_test, y_pred))

#Calculo da Acurácia

#Train/Test Split KNN[5]

knn = KNeighborsClassifier(n_neighbors=5)
knn.fit(X_train, y_train)
y_pred = knn.predict(X_test)
print(metrics.accuracy_score(y_test, y_pred))

#Train/Test Split KNN[1]

knn = KNeighborsClassifier(n_neighbors=1)
knn.fit(X_train, y_train)
y_pred = knn.predict(X_test)
print(metrics.accuracy_score(y_test, y_pred))

#3 - Gráfico de Tunning KNN(1-25)

k_range = list(range(1, 26))
scores = []
for k in k_range:
    knn = KNeighborsClassifier(n_neighbors=k)
    knn.fit(X_train, y_train)
    y_pred = knn.predict(X_test)
    scores.append(metrics.accuracy_score(y_test, y_pred))

import matplotlib.pyplot as plt

get_ipython().magic(u'matplotlib inline')


plt.plot(k_range, scores)
plt.xlabel('Value of K for KNN')
plt.ylabel('Testing Accuracy')

#4 - Qual o melhor modelo com a melhor acurácia?
#entire model KNN[1] = 1.0
